//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaTestWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaTest), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Start", Start);
		L.RegFunction("DoLuaFile", DoLuaFile);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("s_LuaState", get_s_LuaState, set_s_LuaState);
		L.RegVar("timerType", get_timerType, set_timerType);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaTest obj = (LuaTest)ToLua.CheckObject<LuaTest>(L, 1);
			obj.Start();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoLuaFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaTest obj = (LuaTest)ToLua.CheckObject<LuaTest>(L, 1);
			TIMER_TEST_TYPE arg0 = (TIMER_TEST_TYPE)ToLua.CheckObject(L, 2, typeof(TIMER_TEST_TYPE));
			obj.DoLuaFile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaTest obj = (LuaTest)ToLua.CheckObject<LuaTest>(L, 1);
			obj.OnDestroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_LuaState(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, LuaTest.s_LuaState);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_timerType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaTest obj = (LuaTest)o;
			TIMER_TEST_TYPE ret = obj.timerType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index timerType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_LuaState(IntPtr L)
	{
		try
		{
			LuaInterface.LuaState arg0 = (LuaInterface.LuaState)ToLua.CheckObject<LuaInterface.LuaState>(L, 2);
			LuaTest.s_LuaState = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_timerType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaTest obj = (LuaTest)o;
			TIMER_TEST_TYPE arg0 = (TIMER_TEST_TYPE)ToLua.CheckObject(L, 2, typeof(TIMER_TEST_TYPE));
			obj.timerType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index timerType on a nil value");
		}
	}
}

