//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TimerWheelWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TimerWheel), typeof(System.Object));
		L.RegFunction("Tick", Tick);
		L.RegFunction("AddTimer", AddTimer);
		L.RegFunction("RemoveTimer", RemoveTimer);
		L.RegFunction("ModifyTimer", ModifyTimer);
		L.RegFunction("New", _CreateTimerWheel);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("s_TimerMap", get_s_TimerMap, set_s_TimerMap);
		L.RegVar("preWheel", get_preWheel, set_preWheel);
		L.RegVar("nextWheel", get_nextWheel, set_nextWheel);
		L.RegVar("CurrentSlot", get_CurrentSlot, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTimerWheel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				TimerWheel obj = new TimerWheel(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: TimerWheel.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Tick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TimerWheel obj = (TimerWheel)ToLua.CheckObject<TimerWheel>(L, 1);
			obj.Tick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTimer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			TimerWheel obj = (TimerWheel)ToLua.CheckObject<TimerWheel>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			long arg1 = LuaDLL.tolua_checkint64(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			System.Action<object,object> arg3 = (System.Action<object,object>)ToLua.CheckDelegate<System.Action<object,object>>(L, 5);
			object arg4 = ToLua.ToVarObject(L, 6);
			object arg5 = ToLua.ToVarObject(L, 7);
			int o = obj.AddTimer(arg0, arg1, arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveTimer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimerWheel obj = (TimerWheel)ToLua.CheckObject<TimerWheel>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.RemoveTimer(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ModifyTimer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			TimerWheel obj = (TimerWheel)ToLua.CheckObject<TimerWheel>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			long arg1 = LuaDLL.tolua_checkint64(L, 3);
			long arg2 = LuaDLL.tolua_checkint64(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			System.Action<object,object> arg4 = (System.Action<object,object>)ToLua.CheckDelegate<System.Action<object,object>>(L, 6);
			object arg5 = ToLua.ToVarObject(L, 7);
			object arg6 = ToLua.ToVarObject(L, 8);
			bool o = obj.ModifyTimer(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_TimerMap(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, TimerWheel.s_TimerMap);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_preWheel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimerWheel obj = (TimerWheel)o;
			TimerWheel ret = obj.preWheel;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index preWheel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nextWheel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimerWheel obj = (TimerWheel)o;
			TimerWheel ret = obj.nextWheel;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nextWheel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentSlot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimerWheel obj = (TimerWheel)o;
			int ret = obj.CurrentSlot;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentSlot on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_TimerMap(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<int,Timer> arg0 = (System.Collections.Generic.Dictionary<int,Timer>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,Timer>));
			TimerWheel.s_TimerMap = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_preWheel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimerWheel obj = (TimerWheel)o;
			TimerWheel arg0 = (TimerWheel)ToLua.CheckObject<TimerWheel>(L, 2);
			obj.preWheel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index preWheel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nextWheel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimerWheel obj = (TimerWheel)o;
			TimerWheel arg0 = (TimerWheel)ToLua.CheckObject<TimerWheel>(L, 2);
			obj.nextWheel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nextWheel on a nil value");
		}
	}
}

